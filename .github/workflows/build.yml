name: Build and Release Executables

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Read version from package.json
        id: get_version
        shell: bash
        run: |
          PACKAGE_VERSION=$(node -p 'require("./package.json").version')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Create a release
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `Release v${version}`,
              body: `Version ${version} has been released.`,
              draft: true,
              prerelease: false
            });
            core.setOutput('release_url', response.data.html_url);

  build:
    needs: create-release
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Disable draft mode on release
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const release = releases.find(r => r.tag_name === `v${version}`);
            if (release) {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                draft: false
              });
              console.log(`Draft release for version ${version} has been published.`);
            } else {
              console.error(`Release with tag_name v${version} not found.`);
              process.exit(1);
            }